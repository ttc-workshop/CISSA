@model Intersoft.CISSA.UserApp.ServiceReference.BizControl
@using Intersoft.CISSA.UserApp.ServiceReference;

@{
    var control = Model;
}

@if (control is BizText)
{
    var lable = (BizText)control;
    <p title="@lable.Title" class="@lable.Style">@lable.Caption</p> 
}

@if (control is BizEditText)
{
    var edit = (BizEditText)control;

    if (!(ViewData["ParentControl"] is BizGrid))
    {
            @Html.Label(edit.Caption ?? "")
    }

    if (edit.Cols > 0 || edit.Rows > 0)
    {
            @Html.TextArea(edit.Id.ToString(), new { cols = edit.Cols, rows = edit.Rows, validatable = "true", @class = @edit.Style, title = edit.Title })
            <span class="field-validation-error" name="@edit.Id.ToString()"></span>
            <br />
    }
    else
    {
            @Html.TextBox(edit.Id.ToString(), edit.Attribute.Value, new { validatable = "true", @class = edit.Style, title = edit.Title })
            <span class="field-validation-error" name="@edit.Id.ToString()"></span>
            <br />
    }
}

@if (control is BizEditInt)
{
    var edit = (BizEditInt)control;
    if (!(ViewData["ParentControl"] is BizGrid))
    {
            @Html.Label(edit.Caption ?? "")
    }

    if (edit.Cols > 0 || edit.Rows > 0)
    {
            @Html.TextArea(edit.Id.ToString(), new { cols = edit.Cols, rows = edit.Rows, validatable = "true", @class = @edit.Style, title = edit.Title })
            <span class="field-validation-error" name="@edit.Id.ToString()"></span>
            <br />
    }
    else
    {
            @Html.TextBox(edit.Id.ToString(), edit.Attribute.Value, new { validatable = "true", @class = edit.Style, title = edit.Title })
            <span class="field-validation-error" name="@edit.Id.ToString()"></span>
            <br />
    }
}

@if (control is BizEditFloat)
{
    var edit = (BizEditFloat)control;
    if (!(ViewData["ParentControl"] is BizGrid))
    {
            @Html.Label(edit.Caption ?? "")
    }

    if (edit.Cols > 0 || edit.Rows > 0)
    {
            @Html.TextArea(edit.Id.ToString(), new { cols = edit.Cols, rows = edit.Rows, validatable = "true", @class = @edit.Style, title = edit.Title })
            <span class="field-validation-error" name="@edit.Id.ToString()"></span>
            <br />
    }
    else
    {
            @Html.TextBox(edit.Id.ToString(), edit.Attribute.Value, new { validatable = "true", @class = edit.Style, title = edit.Title })
            <span class="field-validation-error" name="@edit.Id.ToString()"></span>
            <br />
    }
}

@if (control is BizEditCurrency)
{
    var edit = (BizEditCurrency)control;
    if (!(ViewData["ParentControl"] is BizGrid))
    {
            @Html.Label(edit.Caption ?? "")
    }

    if (edit.Cols > 0 || edit.Rows > 0)
    {
            @Html.TextArea(edit.Id.ToString(), new { cols = edit.Cols, rows = edit.Rows, validatable = "true", @class = edit.Style, title = edit.Title })
            <span class="field-validation-error" name="@edit.Id.ToString()"></span>
            <br />
    }
    else
    {
            @Html.TextBox(edit.Id.ToString(), edit.Attribute.Value, new { validatable = "true", @class = edit.Style, title = edit.Title }) <text>сом</text>
            <span class="field-validation-error" name="@edit.Id.ToString()"></span>
            <br />
    }
}
@if (control is BizEditDateTime)
{
    var edit = (BizEditDateTime)control;

    if (!(ViewData["ParentControl"] is BizGrid))
    {
            @Html.Label(edit.Caption ?? "")
    }
    
    @Html.TextBox(edit.Id.ToString(), edit.Attribute.Value.ToShortDateString(), new { validatable = "true", @class = edit.Style, title = edit.Title })
    <span class="field-validation-error" name="@edit.Id.ToString()"></span>
    <br />
}

@if (control is BizEditBool)
{
    var box = (BizEditBool)control;

    if (!(ViewData["ParentControl"] is BizGrid))
    {
            @Html.Label(box.Caption ?? "")
    }
    
    @Html.CheckBox(box.Id.ToString(), box.Attribute.Value, new { @class = box.Style, title = box.Title })
} 

@if (control is BizComboBox)
{
    var combo = (BizComboBox)control;

    if (combo.IsRadio)
    {
        if (!(ViewData["ParentControl"] is BizGrid))
        {
            @Html.Label(combo.Caption ?? "")
        }

        if (combo.Attribute.AttrDef.EnumDefType.EnumItems != null)
        {
            List<EnumValue> items = combo.Attribute.AttrDef.EnumDefType.EnumItems;
            foreach (var item in items)
            {
                @Html.RadioButton(combo.Id.ToString(), item.Id, combo.Attribute != null && item.Id == combo.Attribute.AttrDef.Id)
                <text>@item.Value</text>
            }
        }
        
        @Html.ValidationMessage(combo.Id.ToString())   
        <br/>
    }

    else if (combo.Rows > 1)
    {
        if (!(ViewData["ParentControl"] is BizGrid))
        {
            @Html.Label(combo.Caption ?? "")
        }

        if (combo.Attribute.AttrDef.EnumDefType.EnumItems != null)
        {
            IList<EnumValue> items = combo.Attribute.AttrDef.EnumDefType.EnumItems;
            var selectList = new List<SelectListItem>();
            selectList.Add(new SelectListItem
            {
                Selected = false,
                Text = "-не выбран-",
                Value = "00000000-0000-0000-0000-000000000000"
            }
                            );

            selectList.AddRange(
                    from i in items
                    select new SelectListItem
                    {
                        Selected = (i.Id == combo.Attribute.Value),
                        Text = i.Value,
                        Value = i.Id.ToString()
                    }
                );
            @Html.ListBox(combo.Id.ToString(), selectList, new { @class = combo.Style, size = combo.Rows })
        }
        else
        {                       
            @Html.ListBox(combo.Id.ToString())
        }  
        @Html.ValidationMessage(combo.Id.ToString())   
        <br />
    }
    else
    {
        if (!(ViewData["ParentControl"] is BizGrid))
        {
            @Html.Label(combo.Caption ?? "")
        }

        if (combo.Attribute.AttrDef.EnumDefType.EnumItems != null)
        {
            IList<EnumValue> items = combo.Attribute.AttrDef.EnumDefType.EnumItems;
            var selectList = new List<SelectListItem>();
            selectList.Add(new SelectListItem
            {
                Selected = false,
                Text = "-не выбран-",
                Value = "00000000-0000-0000-0000-000000000000"
            }
                            );

            selectList.AddRange(
                    from i in items
                    select new SelectListItem
                    {
                        Selected = (i.Id == combo.Attribute.Value),
                        Text = i.Value,
                        Value = i.Id.ToString()
                    }
                );           
        @Html.DropDownList(combo.Id.ToString(), selectList, new { @class = combo.Style, size = combo.Rows })
        }
        else
        {                       
            @Html.DropDownList(combo.Id.ToString())
        }  
        @Html.ValidationMessage(combo.Id.ToString())   
        <br />
    }
}

@if (control is BizPanel)
{
    var panel = (BizPanel)control;

    if (panel.IsHorizontal)
    {
        <fieldset class="@panel.Style" title="@panel.Title">
            <legend>@panel.Caption</legend>
            <table class="@panel.Style" border="0">
                <tr>
                    @foreach (BizControl subControl in panel.Children)
                    {       
                        <td>@Html.Label(subControl.Caption ?? "")<br/><br/>
                        @Html.Partial("Control", subControl)</td>
                    }
                 </tr>
             </table>
        </fieldset>
    }
    else if (!panel.IsHorizontal)
    {
        <fieldset class="@control.Style" title="@control.Title">
            <legend>@panel.Caption</legend>
            <table class="@control.Style" border="0">

            @foreach (BizControl subControl in panel.Children)
            {
                <tr><td>@Html.Label(subControl.Caption ?? "")<br/><br/>
                        @Html.Partial("Control", subControl)</td></tr>
            }
            </table>
         </fieldset>
    }
    else
    {
        <h3>Неверно указан тип панели</h3>
    }
}

@if (control is BizButton)
{
    var button = (BizButton)control;

    switch (button.ButtonType)
    {
        case BizButtonType.Button:
            if (button.ProcessId != null)
            {
                <button type="button" class="@button.Style" title="@button.Title" onClick="parent.location='@Url.Action("Run", "Process", new { id = (Guid)button.ProcessId })'" >@button.Caption</button>
            }
            else
            {
                <button type="button" class="@button.Style" title="@button.Title" onClick="parent.location='@Url.Action("UserAction", "Form", new { id = button.UserActionId ?? Guid.Empty })'" >@button.Caption</button>
            }
            break;

        case BizButtonType.Reset:
            <button type="reset" class="@button.Style" title="@button.Title" >@button.Caption</button> 
                                                                         break;

        case BizButtonType.Submit:
            <button type="submit" class="@button.Style" title="@button.Title">@button.Caption</button> 
                                                                         break;

        case BizButtonType.Link:
                                                                         if (button.ProcessId != null)
                                                                         {
                @Html.ActionLink(button.Caption, "Run", "Process", new { id = (Guid)button.ProcessId }, null)
                                                                         }
                                                                         else
                                                                         {
                @Html.ActionLink(button.Caption, "UserAction", "Form", new { id = button.UserActionId ?? Guid.Empty }, null)
                                                                         }
                                                                         break;

        default:
            <h3>Неверно указан тип кнопки</h3>
                                                                         break;
    }
}

@if (control is BizGrid)
{
    var grid = (BizGrid)control;

    ViewData["ParentControl"] = grid;
    if (grid.IsDetail)
    {
        <table class="@grid.Style" border="@grid.BorderWidth" title="@grid.Style" >

            @foreach (var child in grid.Children)
            {
                <tr>
                    <th>
                        @child.Caption
                    </th>
                    <td>
                        @Html.Partial("Control", child)
                    </td>
                </tr>
            }

        </table>
    }
    else if (!grid.IsDetail)
    {
        <h3>Этот функционал не реализован</h3>
        <table class="@grid.Style" width="@grid.TableWidth" border="@grid.BorderWidth" title="@grid.Style" >

            <tr>
                @foreach (var child in grid.Children)
                {
                    <th>@child.Caption</th>
                }
             </tr>

             @*TODO: в этом  цикле нужно прокрутить спискок документов и вывести и его*@
             @for (uint i = 0; i < grid.Children.Count; i++)
             {
                <tr>
                    @foreach (var row in grid.Children)
                    {
                        <td>@Html.Partial("Control", row)</td>
                    }
                 </tr>
             }

        </table>
    }
    else
    {
        <h3>Неверно указан тип грида</h3> 
    }
}

@if (control is BizImage)
{
    var image = (BizImage)control;

    switch (image.Path)
    {
        case BizImage.Location.Local:
            <img src="@image.LocalPath" class="@image.Style" alt="@image.Title" height="@image.Height" width="@image.Width"/>
                                                                                                         break;

        case BizImage.Location.DataBase:
                                                                                                         //TODO: реализовать загрузку изображения из БД
                                                                                                         break;

        default:
            <h3>Источник загрузки указан неверно, либо испорчен</h3> 
                                                                                                         break;
    }
}

   
